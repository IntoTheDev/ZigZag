using ToolBox.Pools;using UnityEngine;using Random = UnityEngine.Random;public class Generator : MonoBehaviour{    [SerializeField] private GameObject _floorPrefab = null;    [SerializeField] private GameObject _crystalPrefab = null;    [SerializeField] private Transform _start = null;    [SerializeField] private float _crystalSpawnChance = 0.2f;    private Transform _spawnTo = null;    private Vector3 _crystalSpawnOffset = default;    private const string _generateMethod = nameof(Generate);    private void Awake()    {        _floorPrefab.Populate(100);        _crystalPrefab.Populate(50);        _spawnTo = _start;        _crystalSpawnOffset.y = _floorPrefab.GetComponentInChildren<MeshRenderer>().bounds.extents.y +                                _crystalPrefab.GetComponent<MeshRenderer>().bounds.extents.y;        Generate(Vector3.right);        for (int i = 0; i < 50; i++)            Generate();    }    private void OnEnable() =>        Player.OnTap += Enable;    private void OnDisable() =>        Player.OnTap -= Enable;    private void Enable()    {        if (!IsInvoking(_generateMethod))            InvokeRepeating(_generateMethod, 0f, 0.25f);    }    private void Generate() =>        Generate(Random.value <= 0.5f ? Vector3.forward : Vector3.right);    private void Generate(Vector3 direction)    {        var position = _spawnTo.position + direction;                _spawnTo = _floorPrefab.Get(position, Quaternion.identity).transform;        if (Random.value <= _crystalSpawnChance)            _crystalPrefab.Get(_spawnTo.position + _crystalSpawnOffset, Quaternion.identity, _spawnTo);    }}